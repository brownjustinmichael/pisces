/*!**********************************************************************
 * \file utils_cublas.hcu
 * /Users/justinbrown/Dropbox/spectral_element
 * 
 * Created by Justin Brown on 2013-08-15.
 * Copyright 2013 Justin Brown. All rights reserved.
 ************************************************************************/

#include <cublas.h>
#include <stdio.h>

namespace utils
{
	namespace cublas
	{
		void HANDLE_STATUS (cublasStatus status) {
			switch (status) {
				case CUBLAS_STATUS_NOT_INITIALIZED: printf ("CUBLAS didn't initialize correctly."); throw 0; 
				case CUBLAS_STATUS_ALLOC_FAILED: printf ("CUBLAS allocation failed."); throw 0; 
				case CUBLAS_STATUS_INVALID_VALUE: printf ("CUBLAS unsupported value or parameter."); throw 0; 
				case CUBLAS_STATUS_ARCH_MISMATCH: printf ("CUBLAS feature absent in current architecture."); throw 0; 
				case CUBLAS_STATUS_MAPPING_ERROR: printf ("CUBLAS access to GPU memory failed."); throw 0;
				case CUBLAS_STATUS_EXECUTION_FAILED: printf ("CUBLAS failed to execute."); throw 0;
				case CUBLAS_STATUS_INTERNAL_ERROR: printf ("CUBLAS internal operation failed."); throw 0;
			}
		}
	
		template <class datatype>
		struct cublas_vector 
		{
		public:
			cublas_vector (int i_n, datatype *x = NULL, int incx = 1) {
				inc_vect = 1;
				n = i_n;
				is_active = true;
				HANDLE_STATUS (cublasAlloc (n, sizeof (datatype), (void**) &vect));
				if (x) {
					copy_to_device (n, x, incx);
				}
			}
		
			~cublas_vector () {
				HANDLE_STATUS (cublasFree (vect));
			}
		
			datatype* operator& () {
				return vect;
			}
		
			int size () {
				return n;
			}
		
			void copy_to_device (int n, datatype* x, int incx = 1) {
				HANDLE_STATUS (cublasSetVector (n, sizeof (datatype), x, incx, vect, inc_vect));
			}
		
			void copy_to_host (int n, datatype* x, int incx = 1) {
				HANDLE_STATUS (cublasGetVector (n, sizeof (datatype), vect, inc_vect, x, incx));
			}
		
		private:
			int n;
			datatype* vect;
			int inc_vect;
		};
	
		struct cublas_config
		{
		public:
			cublas_handler () {
				HANDLE_STATUS (cublasInit ());
			}
		
			virtual ~cublas_handler () {
				HANDLE_STATUS (cublasShutdown ());
			}
		};		
	} /* cublas */

} /* utils */