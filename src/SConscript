import os, inspect
Import ("env")
Import ("include_cuda")
Import ("include_opencl")
Import ("include_mp")
Import ("include_mpi")
Import ("include_vt")
Import ("logger")

def directory (path, dirname):
    if dirname [len (path) + 1:] == "":
        return ""
    else:
        return dirname [len (path) + 1:] + "/"

env.Append (CPPPATH = os.getcwd ())

if include_mpi:
    env ["CXX"] = "mpicxx"

    env.Append (CPPFLAGS = ["-D_MPI", "-fexceptions"])
    if include_cuda:
        env.Append (NVCCFLAGS = ["-D_MPI"])
        
if include_vt:
    env ["CXX"] = "vtcxx"
    env.Append (CPPFLAGS = ["-DVTRACE"])
    env.Append (VTFLAGS = ["-vt:cxx", "mpicxx"])
    conf = Configure (env)
    conf.CheckLib ("mpi")
    conf.CheckLib ("mpi_cxx")
    env = conf.Finish ()
        
if include_mp:
    env.Append (CPPFLAGS = ["-fopenmp"])
    env.Append (CPPFLAGS = ["-D_MP"])
env.Append (LINKFLAGS = ["-fopenmp"])

if include_cuda:
    env.Tool ('cuda')
    env.Append (NVCCFLAGS = ["-g", "-arch=sm_20"])
    env.Append (CPPFLAGS = ["-D_CUDA"])
    
if include_opencl:
    env.Append (CPPFLAGS = ["-framework", "OpenCL"])

env.Append (CPPFLAGS = ["-Wall", "-g", "-std=c++0x"])
env.Append (LINKFLAGS = ["-Wall", "-g", "-std=c++0x"])

objects = []

if logger.lower () == "log4cxx":
    conf = Configure (env)
    if conf.CheckLib ("log4cxx"):
        env.Append (CPPFLAGS = ["-D_LOG4CXX"])
        env.Append (NVCCFLAGS = ["-D_LOG4CXX"])
    else:
        logger == "none"
    env = conf.Finish ()
elif logger.lower () == "log4cplus":
    conf = Configure (env)
    if conf.CheckLib ("log4cplus"):
        env.Append (CPPFLAGS = ["-D_LOG4CPLUS"])
        env.Append (NVCCFLAGS = ["-D_LOG4CPLUS"])
    else:
        logger == "none"
    env = conf.Finish ()

path = os.path.dirname (inspect.getfile (inspect.currentframe ()))

for dirname, dirnames, filenames in os.walk (path):
    if dirname != path:
        for filename in filenames:
            if filename == "SConscript":
                env.SConscript(dirname + '/' + filename, variant_dir = os.path.join (".", directory (path, dirname)), duplicate = 0, exports = {'env': env, "objects": objects, "include_cuda" : include_cuda, "include_mp": include_mp})
            if filename.split ('.') [-1] == 'cpp':
                objects.append (env.Object (os.path.relpath (dirname, path) + '/' + filename))

if logger.lower () == "log4cxx":
    objects += env.Object ("config_log4cxx.cpp")
elif logger.lower () == "log4cplus":
    objects += env.Object ("config_log4cplus.cpp")
else:
    objects += env.Object ("config.cpp")
    
conf = Configure (env)
conf.CheckLib ("gfortran")
env = conf.Finish ()

if include_vt:
    env.Append (CPPFLAGS = env ["VTFLAGS"])

env.Default (env.Program(target = "../run/pisces", source = (["main.cpp"] + objects)))

env.Default (env.Program(target = "../run/pisces_init", source = (["init.cpp"] + objects)))
# env.Default (env.Program(target = "../run/pisces_init", source = (["init.cpp"])))

env.Default (env.Program(target = "../run/block_test", source = (["block_test.cpp"] + objects)))
env.Default (env.Program(target = "../run/tridiagonal_block_test", source = (["tridiagonal_block_test.cpp"] + objects)))
env.Default (env.Program(target = "../run/banded_block_test", source = (["banded_block_test.cpp"] + objects)))

env.SConscript('../test/SConscript', variant_dir = "./test", duplicate = 0, exports = {'env': env, "objects": objects, "include_cuda": include_cuda, "include_mp": include_mp})
