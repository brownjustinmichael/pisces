import os, inspect
Import ("*")

for env_var in env_vars:
    env ["ENV"] [env_var] = env_vars [env_var]

for include_dir in include_dirs:
    env.Append (CPPFLAGS = ["-I%s" % include_dir])

for library_dir in library_dirs:
    env.Append (LINKFLAGS = ["-L%s" % library_dir])
    env.Append (CPPFLAGS = ["-L%s" % library_dir])

env.Append (CPPFLAGS = ["-Wno-deprecated"])
env.Append (LINKFLAGS = ["-Wno-deprecated"])

def directory (path, dirname):
    """
    Get the directory name relative to the given path
    
    For the build stage to produce an identical directory structure as the code
    """
    if dirname [len (path) + 1:] == "":
        return ""
    else:
        return dirname [len (path) + 1:] + "/"
        
if include_mpi:
    env ["CC"] = "mpicc"
    env ["CXX"] = "mpicxx"

    env.Append (CPPFLAGS = ["-D_MPI", "-fexceptions"])
        
if cppcompiler is not None:
    env ["CXX"] = cppcompiler

print (env ["CXX"])

if ccompiler is not None:
    env ["CC"] = ccompiler

env.Append (CPPFLAGS = compiler_flags)

if include_mp:
    env.Append (CPPFLAGS = ["-fopenmp"])
    env.Append (CPPFLAGS = ["-D_MP"])
env.Append (LINKFLAGS = ["-fopenmp"])

if root is not None:
    env.Append (CPPFLAGS = ['-DPISCES_ROOT=\\"' + root + '\\"'])

if defaults is not None:
    env.Append (CPPFLAGS = ['-DDEFAULTS_FILE=\\"' + defaults + '\\"'])

env.Append (CPPFLAGS = ["-Wall", "-g", "-std=c++0x"])
env.Append (LINKFLAGS = ["-Wall", "-g", "-std=c++0x"])

# Add the source directory to the include path for better package importing
env.Append (CPPPATH = os.getcwd ())

# If using openmp, add compiler and link flags to let the code know to include openmp functionality
if include_mp:
    env.Append (CPPFLAGS = ["-fopenmp"])
    env.Append (CPPFLAGS = ["-D_MP"])
    env.Append (LINKFLAGS = ["-fopenmp"])

if vertical_grid.lower () == 'cosine':
    env.Append (CPPFLAGS = ["-D_VCOS"])
elif vertical_grid.lower () != 'chebyshev':
    raise ValueError ("PISCES can currently only handle a vertical grid type of either 'cosine' or 'chebyshev'")
    
if dimensions != 2:
    raise ValueError ("PISCES can currently only handle 2 dimensions")
env.Append (CPPFLAGS = ["-DND=%d" % dimensions])

# Add standard compiler flags and c++0x functionality
env.Append (CPPFLAGS = ["-Wall", "-g", "-std=c++0x"])
env.Append (LINKFLAGS = ["-Wall", "-g", "-std=c++0x"])

env.Append (CPPFLAGS = ["-DQUIET=%d" % quiet])

objects = []

# Get the path of this file
path = os.path.dirname (inspect.getfile (inspect.currentframe ()))

# Walk through the directory structure, looking for SConscript files and .cpp files
for dirname, dirnames, filenames in os.walk (path):
    if dirname != path:
        for filename in filenames:
            if filename == "SConscript":
                # Load any SConscript files found
                env.SConscript(dirname + '/' + filename, duplicate = 0, exports = {'env': env, "objects": objects, "include_mp": include_mp})
                
            if filename.split ('.') [-1] == 'cpp':
                # Add any .cpp files found to the list of objects to compile
                objects.append (env.Object (os.path.relpath (dirname, path) + '/' + filename))

# Occasionally, the code won't work without the gfortran library, so check for it
conf = Configure (env)
conf.CheckLib ("gfortran")
env = conf.Finish ()

# Compile the main code
env.Default (env.Program(target = "../run/isces", source = (["isces.cpp"] + objects)))

env.Default (env.Program(target = "../run/pisces", source = (["pisces.cpp"] + objects)))

# Compile the code initializer
env.Default (env.Program(target = "../run/isces_init", source = (["init.cpp"] + objects)))
env.Default (env.Program(target = "../run/pisces_init", source = (["pisces_init.cpp"] + objects)))

print (Dir('.').abspath)
print (objects [3] [0].abspath)

# Add the tests, which can be run with scons check
if cxxtest:
    env.SConscript('../test/SConscript', variant_dir = "./test", duplicate = 0, exports = {'env': env, "objects": objects, "include_mp": include_mp})
